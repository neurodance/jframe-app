'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import Link from 'next/link'
import { createClient } from '@/lib/supabase/client'

type User = {
  id: string
  email?: string
}

export default function CreateJottPage() {
  const [user, setUser] = useState<User | null>(null)
  const [title, setTitle] = useState('')
  const [description, setDescription] = useState('')
  const [prompt, setPrompt] = useState('')
  const [cardJson, setCardJson] = useState('')
  const [isPublished, setIsPublished] = useState(false)
  const [loading, setLoading] = useState(false)
  const [generating, setGenerating] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const router = useRouter()
  const supabase = createClient()

  useEffect(() => {
    checkUser()
  }, [])

  const checkUser = async () => {
    const { data: { user } } = await supabase.auth.getUser()
    if (user) {
      setUser(user)
    }
  }

  const generateCard = async () => {
    if (!prompt) {
      setError('Please enter a prompt')
      return
    }

    setGenerating(true)
    setError(null)

    try {
      // For demo purposes, generate a sample card
      const sampleCard = {
        type: "AdaptiveCard",
        version: "1.5",
        body: [
          {
            type: "TextBlock",
            text: title || "Generated Jott",
            size: "Large",
            weight: "Bolder",
            wrap: true
          },
          {
            type: "TextBlock",
            text: description || prompt,
            wrap: true,
            spacing: "Medium"
          },
          {
            type: "Container",
            items: [
              {
                type: "TextBlock",
                text: "This is a demo card. In production, this would be generated by AI based on your prompt.",
                wrap: true,
                isSubtle: true,
                size: "Small"
              }
            ],
            style: "emphasis",
            spacing: "Medium",
            bleed: true
          }
        ],
        actions: [
          {
            type: "Action.OpenUrl",
            title: "Learn More",
            url: "https://jframe.ai"
          }
        ]
      }

      setCardJson(JSON.stringify(sampleCard, null, 2))
    } catch (error: any) {
      setError('Failed to generate card')
    } finally {
      setGenerating(false)
    }
  }

  const saveJott = async () => {
    if (!title || !cardJson) {
      setError('Please provide a title and generate a card')
      return
    }

    setLoading(true)
    setError(null)

    try {
      const slug = title.toLowerCase()
        .replace(/[^a-z0-9]+/g, '-')
        .replace(/(^-|-$)/g, '')
        + '-' + Date.now()

      const { data, error } = await supabase
        .from('jotts')
        .insert({
          user_id: user?.id,
          title,
          description,
          content: JSON.parse(cardJson),
          slug,
          is_published: isPublished,
          is_public: true,
          tags: []
        })
        .select()
        .single()

      if (error) throw error

      router.push('/dashboard')
    } catch (error: any) {
      setError(error.message)
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Navigation */}
      <nav className="bg-white border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center">
              <Link href="/dashboard" className="text-2xl font-bold text-jott-blue">
                JFrame
              </Link>
              <span className="ml-4 text-gray-600">Create Jott</span>
            </div>
            <div className="flex items-center space-x-4">
              <Link
                href="/dashboard"
                className="text-gray-600 hover:text-gray-900"
              >
                Back to Dashboard
              </Link>
            </div>
          </div>
        </div>
      </nav>

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid lg:grid-cols-2 gap-8">
          {/* Left Column - Form */}
          <div>
            <div className="bg-white rounded-lg shadow-sm p-6">
              <h2 className="text-xl font-bold mb-6">Create Your Jott</h2>

              {error && (
                <div className="bg-red-50 text-red-600 p-3 rounded-lg text-sm mb-4">
                  {error}
                </div>
              )}

              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Title
                  </label>
                  <input
                    type="text"
                    value={title}
                    onChange={(e) => setTitle(e.target.value)}
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-jott-blue"
                    placeholder="Enter your Jott title"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Description (optional)
                  </label>
                  <textarea
                    value={description}
                    onChange={(e) => setDescription(e.target.value)}
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-jott-blue"
                    rows={2}
                    placeholder="Brief description of your Jott"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    AI Prompt
                  </label>
                  <textarea
                    value={prompt}
                    onChange={(e) => setPrompt(e.target.value)}
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-jott-blue"
                    rows={4}
                    placeholder="Describe what you want the AI to create..."
                  />
                </div>

                <button
                  onClick={generateCard}
                  disabled={generating || !prompt}
                  className="w-full bg-purple-600 text-white py-2 px-4 rounded-lg hover:bg-purple-700 transition disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {generating ? 'Generating...' : 'Generate with AI'}
                </button>

                <div className="border-t pt-4">
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={isPublished}
                      onChange={(e) => setIsPublished(e.target.checked)}
                      className="mr-2"
                    />
                    <span className="text-sm text-gray-700">
                      Publish immediately
                    </span>
                  </label>
                </div>

                <div className="flex gap-3">
                  <button
                    onClick={saveJott}
                    disabled={loading || !title || !cardJson}
                    className="flex-1 bg-jott-blue text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {loading ? 'Saving...' : 'Save Jott'}
                  </button>
                  <Link
                    href="/dashboard"
                    className="flex-1 text-center border border-gray-300 py-2 px-4 rounded-lg hover:bg-gray-50 transition"
                  >
                    Cancel
                  </Link>
                </div>
              </div>
            </div>
          </div>

          {/* Right Column - Preview */}
          <div>
            <div className="bg-white rounded-lg shadow-sm p-6">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-semibold">Card JSON</h3>
                {cardJson && (
                  <button
                    onClick={() => navigator.clipboard.writeText(cardJson)}
                    className="text-sm text-jott-blue hover:underline"
                  >
                    Copy JSON
                  </button>
                )}
              </div>

              <div className="bg-gray-50 rounded-lg p-4 min-h-[400px]">
                {cardJson ? (
                  <pre className="text-xs overflow-auto">
                    <code>{cardJson}</code>
                  </pre>
                ) : (
                  <div className="text-gray-400 text-center py-12">
                    Generated card JSON will appear here
                  </div>
                )}
              </div>

              {cardJson && (
                <div className="mt-4 p-4 bg-blue-50 rounded-lg">
                  <p className="text-sm text-blue-700">
                    <strong>Preview Note:</strong> In production, this would render as a rich, interactive Adaptive Card.
                  </p>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}